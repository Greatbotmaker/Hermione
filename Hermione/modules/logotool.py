from pyrogram import filters
from pyrogram.types import Message
from Hermione.services.pyrogram import pbot as  app
from requests import get
import os
import requests
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import UserAlreadyParticipant
from pyrogram.errors import UserNotParticipant, ChatAdminRequired, UsernameNotOccupied
from PIL import Image
import io
from Hermione.modules.fsub import ForceSub

SD_API = os.environ.get('SD_API')
API = os.environ.get('TZ_API')
WRITER = API
caption = """
🥀 **Generated Successfully** 🎉
`◇───────────────◇`
🌹 **Generated By** : [Hermione](https://t.me/hermioneslbot)
||☘️**Requestor** : {} ||
🔥 **Powered By **  : [TeamHermione](https://t.me/teamhermione) | [TechZ Bots](https://t.me/TechZBots) | [SDBOTs Infinity](https://t.me/SDBOTs_inifinity)
`◇───────────────◇️ ` 
    """
captiond = """
🥀 **Generated Successfully** 🎉
`◇───────────────◇`
🌹 **Generated By** : [Hermione](https://t.me/hermioneslbot)
||☘️ **Requestor** : {} ||
🔥 **Powered By **  : [TeamHermione](https://t.me/teamhermione) | [Damantha Jasinghe](https://t.me/MrItzme) | [SDBOTs Infinity](https://t.me/SDBOTs_inifinity)
`◇───────────────◇️ ` 
    """
JOIN_ASAP = f" **🚫 Access Denied**\n\n You Must Join [My News Channel](https://t.me/Hermione_Updates)To Use Me. So, Please Join it & Try Again." 
FSUBB = InlineKeyboardMarkup( 
           [[ 
               InlineKeyboardButton(text="News Channel ", url=f"https://t.me/Hermione_Updates") 
           ]] 
)

def get_text(message: Message) -> [None, str]:
    text_to_return = message.text
    if message.text is None:
        return None
    if " " in text_to_return:
        try:
            return message.text.split(None, 1)[1]
        except IndexError:
            return None
    else:
        return None


@app.on_message(filters.command(["logo", "hqlogo"]) & ~filters.bot)
@ForceSub
async def logo(client, message):      
 quew = get_text(message)
 if not quew:
     await client.send_message(message.chat.id, "😶 **Please Give me A Text For The Logo**.")
     return
 m = await client.send_message(message.chat.id, "`⚙️ Creating Your logo..`")
 try:
    text = get_text(message)
    LOGO_API = f"https://api.sdbots.tk/logohq?text={text}"
    randc = (LOGO_API)
    img = Image.open(io.BytesIO(requests.get(randc).content))
    murl = requests.get(f"https://api.sdbots.tk/logohq?text={text}").url #name
    fname = "hermione.png"
    img.save(fname, "png")
    await app.send_chat_action(message.chat.id, "upload_photo")
    await client.send_photo(message.chat.id, photo=murl, caption = captiond.format(message.from_user.mention),
                 reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "••Telegraph Link••", url=f"{murl}"
                    )
                ],
            ]
          ),
    )
    await m.edit("**Logo Genarated Successfully 🎉**")
    if os.path.exists(fname):
            os.remove(fname)
 except Exception as e:
    await m.edit(message.chat.id, f'Error, Report @HermioneSupport_Official, {e}')

#hq logo creator
@app.on_message(filters.command("sdlogo"))
async def on_off_antiarab(_, message: Message):
    text = message.text.split(None, 1)[1]
    m = await app.send_message(message.chat.id, "`⚙️ Creating Your logo..`")
    photo = get(f"{API}/logo?text={text}").history[1].url
    await app.send_photo(message.chat.id, photo=photo, caption =caption.format(message.from_user.mention),
                 reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "••Telegraph Link••", url=f"{photo}"
                    )
                ]
            ]
          ),
    )
    await m.edit("**Logo Genarated Successfully 🎉**")
#handwrite
@app.on_message(filters.command("write"))
@ForceSub
async def on_off_antiarab(_, message: Message):
    text = message.text.split(None, 1)[1]
    m = await app.send_message(message.chat.id, "`⚙️ creating Your text..`")
    API = f"https://sd-apis.up.railway.app/write"
    body = {     
     "text":f"{text}"     
    }
    req = requests.post(url=API, headers={'Content-Type': 'application/json'}, json=body)
    img = req.url
    await app.send_photo(message.chat.id, photo=img, caption =captiond.format(message.from_user.mention),
                 reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "••Telegraph Link••", url=f"{img}"
                    )
                ]
            ]
          ),
    )
    await m.edit("**Genarated Successfully 🎉**")
    
#wallpaper
@app.on_message(filters.command("TESTwall") & ~filters.bot)
async def logo(client, message):      
 quew = get_text(message)
 if not quew:
     await client.send_message(message.chat.id, "😶 **Please Give me A Text For The Wallpaper**.")
     return
 m = await client.send_message(message.chat.id, "`⚙️ Creating Your logo..`")
 try:
    text = get_text(message)
    LOGO_API = f"https://techzbotsapi.herokuapp.com/logo?text={text}"
    randc = (LOGO_API)
    img = Image.open(io.BytesIO(requests.get(randc).content))
    murl = requests.get(f"https://techzbotsapi.herokuapp.com/wall?query={text}").history[1].url #name
    fname = "hermione.png"
    img.save(fname, "png")
    await client.send_photo(message.chat.id, photo=murl, caption = caption.format(message.from_user.mention),
                 reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "••Telegraph Link••", url=f"{murl}"
                    )
                ],
            ]
          ),
    )
    if os.path.exists(fname):
            os.remove(fname)
 except Exception as e:
    await client.send_message(message.chat.id, f'Error, Report @HermioneSupport_Official, {e}')
    await m.delete()
#slogo
@app.on_message(filters.command("glogo"))
@ForceSub
async def on_off_antiarab(_, message: Message):
    quew = get_text(message)
    caption_text = """
✍️ **Generated Successfully** ✅
`◇───────────────◇`
👩‍💻 **Generated By** : [Hermione](https://t.me/hermioneslbot)
||🙋‍♂ **Requestor** : {} ||
⚡️ **Powered By **  : [TeamHermione](https://t.me/teamhermione) | [Single Devolopers](https://t.me/SingleDevelopers) | [TeamSDBotz](https://t.me/SDBOTs_inifinity)
`◇───────────────◇️ `
"""
    if not quew:
        await message.reply_text(message.chat.id, "😶Please give a text.")
        return
    m = await app.send_message(message.chat.id, "`⚙️ Creating Your logo..`")    
    name = message.text.split(None, 1)[1]
    req = requests.get(f"https://sd-apis.up.railway.app/logo?logo={name}")
    IMG = req.text
    rurl = requests.get(f"https://sd-apis.up.railway.app/logo?logo={name}").text    
    await app.send_photo(message.chat.id, photo=IMG, caption =captiond.format(message.from_user.mention),
                 reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "••Telegraph Link••", url=f"{rurl}"
                    )
                ]
            ]
          ),
    )
    await m.edit("**Logo Genarated Successfully 🎉**")

__MODULE__ = "ʜᴀɴᴅ ᴡʀɪᴛᴇ✍️"
HELP = """
**🍁 How To Use Me ?**
**To Make Logo -** `/logo Your Name`
**To Make Square Logo - ** `/logosq Your Name`
🔥 **New Beautiful trending logo** - `/glogo [TEXT]` 

**☘️ Example:** 
`/logo Hermione`
`/logosq Hermione`
`/glogo Hermione`

🔥 **Powered By **  : [TeamHermione](https://t.me/teamhermione) | [Damantha Jasinghe](https://t.me/MrItzme) | [SDBOTs Infinity](https://t.me/SDBOTs_inifinity)
"""
HELPSTRINGS = """
Here is the help for Hand Writer:

- /write [TEXT]: Write a text in a page of a book.

Special Credits: Damantha Jasinghe

"""
__advtools__ = HELPSTRINGS
__EXTRAS__ = HELPSTRINGS
